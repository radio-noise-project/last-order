// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSisters(t *testing.T) {
	t.Parallel()

	query := Sisters()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSistersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSistersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sisters().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSistersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SisterSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSistersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SisterExists(ctx, tx, o.SisterID)
	if err != nil {
		t.Errorf("Unable to check if Sister exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SisterExists to return true, but got false.")
	}
}

func testSistersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	sisterFound, err := FindSister(ctx, tx, o.SisterID)
	if err != nil {
		t.Error(err)
	}

	if sisterFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSistersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sisters().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSistersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sisters().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSistersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	sisterOne := &Sister{}
	sisterTwo := &Sister{}
	if err = randomize.Struct(seed, sisterOne, sisterDBTypes, false, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}
	if err = randomize.Struct(seed, sisterTwo, sisterDBTypes, false, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sisterOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sisterTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sisters().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSistersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sisterOne := &Sister{}
	sisterTwo := &Sister{}
	if err = randomize.Struct(seed, sisterOne, sisterDBTypes, false, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}
	if err = randomize.Struct(seed, sisterTwo, sisterDBTypes, false, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = sisterOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = sisterTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sisterBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func sisterAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Sister) error {
	*o = Sister{}
	return nil
}

func testSistersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Sister{}
	o := &Sister{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, sisterDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Sister object: %s", err)
	}

	AddSisterHook(boil.BeforeInsertHook, sisterBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	sisterBeforeInsertHooks = []SisterHook{}

	AddSisterHook(boil.AfterInsertHook, sisterAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	sisterAfterInsertHooks = []SisterHook{}

	AddSisterHook(boil.AfterSelectHook, sisterAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	sisterAfterSelectHooks = []SisterHook{}

	AddSisterHook(boil.BeforeUpdateHook, sisterBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	sisterBeforeUpdateHooks = []SisterHook{}

	AddSisterHook(boil.AfterUpdateHook, sisterAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	sisterAfterUpdateHooks = []SisterHook{}

	AddSisterHook(boil.BeforeDeleteHook, sisterBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	sisterBeforeDeleteHooks = []SisterHook{}

	AddSisterHook(boil.AfterDeleteHook, sisterAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	sisterAfterDeleteHooks = []SisterHook{}

	AddSisterHook(boil.BeforeUpsertHook, sisterBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	sisterBeforeUpsertHooks = []SisterHook{}

	AddSisterHook(boil.AfterUpsertHook, sisterAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	sisterAfterUpsertHooks = []SisterHook{}
}

func testSistersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSistersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(sisterColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSistersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSistersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SisterSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSistersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sisters().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sisterDBTypes = map[string]string{`SisterID`: `uuid`, `Name`: `character varying`, `Role`: `smallint`, `Address`: `text`, `Port`: `integer`, `Description`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_             = bytes.MinRead
)

func testSistersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sisterPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(sisterAllColumns) == len(sisterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSistersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sisterAllColumns) == len(sisterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Sister{}
	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, sisterDBTypes, true, sisterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sisterAllColumns, sisterPrimaryKeyColumns) {
		fields = sisterAllColumns
	} else {
		fields = strmangle.SetComplement(
			sisterAllColumns,
			sisterPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SisterSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSistersUpsert(t *testing.T) {
	t.Parallel()

	if len(sisterAllColumns) == len(sisterPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Sister{}
	if err = randomize.Struct(seed, &o, sisterDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sister: %s", err)
	}

	count, err := Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, sisterDBTypes, false, sisterPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Sister struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Sister: %s", err)
	}

	count, err = Sisters().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
