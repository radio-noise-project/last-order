// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Keys", testKeys)
	t.Run("SchemaMigrations", testSchemaMigrations)
	t.Run("Sisters", testSisters)
}

func TestDelete(t *testing.T) {
	t.Run("Keys", testKeysDelete)
	t.Run("SchemaMigrations", testSchemaMigrationsDelete)
	t.Run("Sisters", testSistersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Keys", testKeysQueryDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsQueryDeleteAll)
	t.Run("Sisters", testSistersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Keys", testKeysSliceDeleteAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceDeleteAll)
	t.Run("Sisters", testSistersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Keys", testKeysExists)
	t.Run("SchemaMigrations", testSchemaMigrationsExists)
	t.Run("Sisters", testSistersExists)
}

func TestFind(t *testing.T) {
	t.Run("Keys", testKeysFind)
	t.Run("SchemaMigrations", testSchemaMigrationsFind)
	t.Run("Sisters", testSistersFind)
}

func TestBind(t *testing.T) {
	t.Run("Keys", testKeysBind)
	t.Run("SchemaMigrations", testSchemaMigrationsBind)
	t.Run("Sisters", testSistersBind)
}

func TestOne(t *testing.T) {
	t.Run("Keys", testKeysOne)
	t.Run("SchemaMigrations", testSchemaMigrationsOne)
	t.Run("Sisters", testSistersOne)
}

func TestAll(t *testing.T) {
	t.Run("Keys", testKeysAll)
	t.Run("SchemaMigrations", testSchemaMigrationsAll)
	t.Run("Sisters", testSistersAll)
}

func TestCount(t *testing.T) {
	t.Run("Keys", testKeysCount)
	t.Run("SchemaMigrations", testSchemaMigrationsCount)
	t.Run("Sisters", testSistersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Keys", testKeysHooks)
	t.Run("SchemaMigrations", testSchemaMigrationsHooks)
	t.Run("Sisters", testSistersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Keys", testKeysInsert)
	t.Run("Keys", testKeysInsertWhitelist)
	t.Run("SchemaMigrations", testSchemaMigrationsInsert)
	t.Run("SchemaMigrations", testSchemaMigrationsInsertWhitelist)
	t.Run("Sisters", testSistersInsert)
	t.Run("Sisters", testSistersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Keys", testKeysReload)
	t.Run("SchemaMigrations", testSchemaMigrationsReload)
	t.Run("Sisters", testSistersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Keys", testKeysReloadAll)
	t.Run("SchemaMigrations", testSchemaMigrationsReloadAll)
	t.Run("Sisters", testSistersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Keys", testKeysSelect)
	t.Run("SchemaMigrations", testSchemaMigrationsSelect)
	t.Run("Sisters", testSistersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Keys", testKeysUpdate)
	t.Run("SchemaMigrations", testSchemaMigrationsUpdate)
	t.Run("Sisters", testSistersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Keys", testKeysSliceUpdateAll)
	t.Run("SchemaMigrations", testSchemaMigrationsSliceUpdateAll)
	t.Run("Sisters", testSistersSliceUpdateAll)
}
