// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testKeys(t *testing.T) {
	t.Parallel()

	query := Keys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Keys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KeySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := KeyExists(ctx, tx, o.KeyID)
	if err != nil {
		t.Errorf("Unable to check if Key exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KeyExists to return true, but got false.")
	}
}

func testKeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	keyFound, err := FindKey(ctx, tx, o.KeyID)
	if err != nil {
		t.Error(err)
	}

	if keyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Keys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testKeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Keys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	keyOne := &Key{}
	keyTwo := &Key{}
	if err = randomize.Struct(seed, keyOne, keyDBTypes, false, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}
	if err = randomize.Struct(seed, keyTwo, keyDBTypes, false, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = keyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = keyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Keys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keyOne := &Key{}
	keyTwo := &Key{}
	if err = randomize.Struct(seed, keyOne, keyDBTypes, false, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}
	if err = randomize.Struct(seed, keyTwo, keyDBTypes, false, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = keyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = keyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func keyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func keyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Key) error {
	*o = Key{}
	return nil
}

func testKeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Key{}
	o := &Key{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, keyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Key object: %s", err)
	}

	AddKeyHook(boil.BeforeInsertHook, keyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	keyBeforeInsertHooks = []KeyHook{}

	AddKeyHook(boil.AfterInsertHook, keyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	keyAfterInsertHooks = []KeyHook{}

	AddKeyHook(boil.AfterSelectHook, keyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	keyAfterSelectHooks = []KeyHook{}

	AddKeyHook(boil.BeforeUpdateHook, keyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	keyBeforeUpdateHooks = []KeyHook{}

	AddKeyHook(boil.AfterUpdateHook, keyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	keyAfterUpdateHooks = []KeyHook{}

	AddKeyHook(boil.BeforeDeleteHook, keyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	keyBeforeDeleteHooks = []KeyHook{}

	AddKeyHook(boil.AfterDeleteHook, keyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	keyAfterDeleteHooks = []KeyHook{}

	AddKeyHook(boil.BeforeUpsertHook, keyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	keyBeforeUpsertHooks = []KeyHook{}

	AddKeyHook(boil.AfterUpsertHook, keyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	keyAfterUpsertHooks = []KeyHook{}
}

func testKeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(keyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := KeySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testKeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Keys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	keyDBTypes = map[string]string{`KeyID`: `uuid`, `PrivateKey`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_          = bytes.MinRead
)

func testKeysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(keyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(keyAllColumns) == len(keyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, keyDBTypes, true, keyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testKeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(keyAllColumns) == len(keyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Key{}
	if err = randomize.Struct(seed, o, keyDBTypes, true, keyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, keyDBTypes, true, keyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(keyAllColumns, keyPrimaryKeyColumns) {
		fields = keyAllColumns
	} else {
		fields = strmangle.SetComplement(
			keyAllColumns,
			keyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := KeySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testKeysUpsert(t *testing.T) {
	t.Parallel()

	if len(keyAllColumns) == len(keyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Key{}
	if err = randomize.Struct(seed, &o, keyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Key: %s", err)
	}

	count, err := Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, keyDBTypes, false, keyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Key struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Key: %s", err)
	}

	count, err = Keys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
